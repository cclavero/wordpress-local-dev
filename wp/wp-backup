#!/usr/bin/env python3

import sys
import os
import argparse
from dotenv import load_dotenv


# Constants -------------------------------------------------------------------

CMD_VER = "1.0"
CMD_ARG_OPT_FILE = ["-f", "--file"]
CMD_ARG_OPT_MODE = ["-m", "--mode"]
CMD_ARG_OPT_MODE_VALS = ["create", "restore"]

WP_VOL = "./wp-data"
WP_NETWORK = "wp_net"
WP_CLI_VERSION = "2.9.0"
WP_CLI_WORKDIR = "/var/www/html"
WP_CMDS = {
    "docker_base": "docker run -it -v {}:" + WP_CLI_WORKDIR + " -w " + WP_CLI_WORKDIR + " -u {}:{} "
                   "-e WORDPRESS_DB_HOST={} -e WORDPRESS_DB_NAME={} -e WORDPRESS_DB_USER={} -e WORDPRESS_DB_PASSWORD={} "
                   "--network={} --name wp-cli --rm wordpress:cli-{} /bin/bash -c \"{}\"",
    "create_backup_db": "db export",
    "restore_backup_db": "db import {}",
    "delete_db": "db clean --yes",
    "cmd_placeholder": "#cmd",
    "create_zip": "zip -r -T {} {}",
    "restore_zip": "unzip {} -d {}",
    "rm_contents": "rm -rf {}",
    "list_files": "ls -lah {}",
    "backup_db_file_filter": "wordpress-*.sql"
}


# Functions -------------------------------------------------------------------

def get_cmd_args():
    parser = argparse.ArgumentParser()
    parser.add_argument(CMD_ARG_OPT_FILE[0], CMD_ARG_OPT_FILE[1], required=True, help="WP backup file full path")
    parser.add_argument(CMD_ARG_OPT_MODE[0], CMD_ARG_OPT_MODE[1], choices=CMD_ARG_OPT_MODE_VALS, required=True,
                        help="Execution mode: {}".format(CMD_ARG_OPT_MODE_VALS))
    args = parser.parse_args()
    return args


def get_docker_wp_cli_cmd():
    load_dotenv()
    return WP_CMDS["docker_base"].format(WP_VOL, os.getgid(), os.getuid(), os.getenv("WP_DB_HOST"), os.getenv("WP_DB_NAME"), os.getenv("WP_DB_USER"),
                                         os.getenv("WP_DB_PASSWORD"), WP_NETWORK, WP_CLI_VERSION, WP_CMDS["cmd_placeholder"])


def exec_wp_cli(cmd_docker_wp_cli, cmd):
    cmd = "wp " + cmd
    shell_cmd = cmd_docker_wp_cli.replace(WP_CMDS["cmd_placeholder"], cmd)
    os.system(shell_cmd)


def find_file(base_path, ext):
    for file in os.listdir(base_path):
        if file.endswith(ext):
            return file
    return


def exec_wp_backup_create(cmd_docker_wp_cli, backup_path):
    # Create DB backup file
    exec_wp_cli(cmd_docker_wp_cli, WP_CMDS["create_backup_db"])
    # Create zip file with all the site files, inlcuding DB backup file
    full_path = backup_path["path"] + "/" + backup_path["file"]
    shell_cmd = WP_CMDS["create_zip"].format(full_path, WP_VOL)
    os.system(shell_cmd)
    # Delete DB backup files
    shell_cmd = WP_CMDS["rm_contents"].format(WP_VOL + "/" + WP_CMDS["backup_db_file_filter"])
    os.system(shell_cmd)
    # Show created backup file
    print("- Generated backup file:")
    shell_cmd = WP_CMDS["list_files"].format(full_path)
    os.system(shell_cmd)


def exec_wp_backup_restore(cmd_docker_wp_cli, backup_path):
    # Check if backup file exists
    full_path = backup_path["path"] + "/" + backup_path["file"]
    if not os.path.exists(full_path):
        sys.exit("Error: WP backup file not found: {}".format(full_path))
    # Delete current DB
    exec_wp_cli(cmd_docker_wp_cli, WP_CMDS["delete_db"])
    # Delete WP data volume
    wp_all_contents = "{}/.htaccess {}/*.* {}/*".format(WP_VOL, WP_VOL, WP_VOL)
    shell_cmd = WP_CMDS["rm_contents"].format(wp_all_contents)
    os.system(shell_cmd)
    # Unzip zip file, including DB backup file
    shell_cmd = WP_CMDS["restore_zip"].format(full_path, "./")
    os.system(shell_cmd)
    # Get the backup DB file
    db_backup_file = find_file(WP_VOL, ".sql")
    print("- DB backup file: '{}'".format(db_backup_file))
    # Restore DB backup file
    exec_wp_cli(cmd_docker_wp_cli, WP_CMDS["restore_backup_db"].format(db_backup_file))
    # Delete DB backup files
    shell_cmd = WP_CMDS["rm_contents"].format(WP_VOL + "/" + WP_CMDS["backup_db_file_filter"])
    os.system(shell_cmd)


def execute_wp_backup():
    print("WP Backup: ver. {}".format(CMD_VER))
    args = get_cmd_args()
    cmd_docker_wp_cli = get_docker_wp_cli_cmd()
    backup_path = {
        "path": os.path.dirname(os.path.abspath(args.file)),
        "file": os.path.basename(args.file)
    }
    if not os.path.exists(backup_path["path"]):
        sys.exit("Error: WP backup path not found: {}".format(backup_path["path"]))
    print("- WP backup path and file: {}".format(backup_path))
    print("- Mode: {}".format(args.mode))
    match args.mode:
        case "create":
            exec_wp_backup_create(cmd_docker_wp_cli, backup_path)
        case "restore":
            exec_wp_backup_restore(cmd_docker_wp_cli, backup_path)
        case _:
            sys.exit("Error: Unexpected error for mode: {}".format(args.mode))


# Main ------------------------------------------------------------------------

execute_wp_backup()
